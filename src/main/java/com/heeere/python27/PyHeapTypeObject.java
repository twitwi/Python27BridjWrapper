package com.heeere.python27;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : object.h:228</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("python27") 
public class PyHeapTypeObject extends StructObject {
	public PyHeapTypeObject() {
		super();
	}
	/**
	 * Note: there's a dependency on the order of these members<br>
	 * in slotptr() in typeobject.c .<br>
	 * C type : PyTypeObject
	 */
	@Field(0) 
	public PyTypeObject ht_type() {
		return this.io.getNativeObjectField(this, 0);
	}
	/**
	 * Note: there's a dependency on the order of these members<br>
	 * in slotptr() in typeobject.c .<br>
	 * C type : PyTypeObject
	 */
	@Field(0) 
	public PyHeapTypeObject ht_type(PyTypeObject ht_type) {
		this.io.setNativeObjectField(this, 0, ht_type);
		return this;
	}
	/// C type : PyNumberMethods
	@Field(1) 
	public PyNumberMethods as_number() {
		return this.io.getNativeObjectField(this, 1);
	}
	/// C type : PyNumberMethods
	@Field(1) 
	public PyHeapTypeObject as_number(PyNumberMethods as_number) {
		this.io.setNativeObjectField(this, 1, as_number);
		return this;
	}
	/// C type : PyMappingMethods
	@Field(2) 
	public PyMappingMethods as_mapping() {
		return this.io.getNativeObjectField(this, 2);
	}
	/// C type : PyMappingMethods
	@Field(2) 
	public PyHeapTypeObject as_mapping(PyMappingMethods as_mapping) {
		this.io.setNativeObjectField(this, 2, as_mapping);
		return this;
	}
	/**
	 * as_sequence comes after as_mapping,<br>
	 * so that the mapping wins when both<br>
	 * the mapping and the sequence define<br>
	 * a given operator (e.g. __getitem__).<br>
	 * see add_operators() in typeobject.c .<br>
	 * C type : PySequenceMethods
	 */
	@Field(3) 
	public PySequenceMethods as_sequence() {
		return this.io.getNativeObjectField(this, 3);
	}
	/**
	 * as_sequence comes after as_mapping,<br>
	 * so that the mapping wins when both<br>
	 * the mapping and the sequence define<br>
	 * a given operator (e.g. __getitem__).<br>
	 * see add_operators() in typeobject.c .<br>
	 * C type : PySequenceMethods
	 */
	@Field(3) 
	public PyHeapTypeObject as_sequence(PySequenceMethods as_sequence) {
		this.io.setNativeObjectField(this, 3, as_sequence);
		return this;
	}
	/// C type : PyBufferProcs
	@Field(4) 
	public PyBufferProcs as_buffer() {
		return this.io.getNativeObjectField(this, 4);
	}
	/// C type : PyBufferProcs
	@Field(4) 
	public PyHeapTypeObject as_buffer(PyBufferProcs as_buffer) {
		this.io.setNativeObjectField(this, 4, as_buffer);
		return this;
	}
	/// C type : PyObject*
	@Field(5) 
	public Pointer<PyObject > ht_name() {
		return this.io.getPointerField(this, 5);
	}
	/// C type : PyObject*
	@Field(5) 
	public PyHeapTypeObject ht_name(Pointer<PyObject > ht_name) {
		this.io.setPointerField(this, 5, ht_name);
		return this;
	}
	/// C type : PyObject*
	@Field(6) 
	public Pointer<PyObject > ht_slots() {
		return this.io.getPointerField(this, 6);
	}
	/// C type : PyObject*
	@Field(6) 
	public PyHeapTypeObject ht_slots(Pointer<PyObject > ht_slots) {
		this.io.setPointerField(this, 6, ht_slots);
		return this;
	}
	public PyHeapTypeObject(Pointer pointer) {
		super(pointer);
	}
}
