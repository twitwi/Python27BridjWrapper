package com.heeere.python27;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.CLong;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : setobject.h:28</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("python27") 
public class _setobject extends StructObject {
	public _setobject() {
		super();
	}
	/// C type : Py_ssize_t
	@Ptr 
	@Field(0) 
	public long ob_refcnt() {
		return this.io.getSizeTField(this, 0);
	}
	/// C type : Py_ssize_t
	@Ptr 
	@Field(0) 
	public _setobject ob_refcnt(long ob_refcnt) {
		this.io.setSizeTField(this, 0, ob_refcnt);
		return this;
	}
	/// C type : _typeobject*
	@Field(1) 
	public Pointer<PyTypeObject > ob_type() {
		return this.io.getPointerField(this, 1);
	}
	/// C type : _typeobject*
	@Field(1) 
	public _setobject ob_type(Pointer<PyTypeObject > ob_type) {
		this.io.setPointerField(this, 1, ob_type);
		return this;
	}
	/**
	 * # Active + # Dummy<br>
	 * C type : Py_ssize_t
	 */
	@Ptr 
	@Field(2) 
	public long fill() {
		return this.io.getSizeTField(this, 2);
	}
	/**
	 * # Active + # Dummy<br>
	 * C type : Py_ssize_t
	 */
	@Ptr 
	@Field(2) 
	public _setobject fill(long fill) {
		this.io.setSizeTField(this, 2, fill);
		return this;
	}
	/**
	 * # Active<br>
	 * C type : Py_ssize_t
	 */
	@Ptr 
	@Field(3) 
	public long used() {
		return this.io.getSizeTField(this, 3);
	}
	/**
	 * # Active<br>
	 * C type : Py_ssize_t
	 */
	@Ptr 
	@Field(3) 
	public _setobject used(long used) {
		this.io.setSizeTField(this, 3, used);
		return this;
	}
	/**
	 * The table contains mask + 1 slots, and that's a power of 2.<br>
	 * We store the mask instead of the size because the mask is more<br>
	 * frequently needed.<br>
	 * C type : Py_ssize_t
	 */
	@Ptr 
	@Field(4) 
	public long mask() {
		return this.io.getSizeTField(this, 4);
	}
	/**
	 * The table contains mask + 1 slots, and that's a power of 2.<br>
	 * We store the mask instead of the size because the mask is more<br>
	 * frequently needed.<br>
	 * C type : Py_ssize_t
	 */
	@Ptr 
	@Field(4) 
	public _setobject mask(long mask) {
		this.io.setSizeTField(this, 4, mask);
		return this;
	}
	/**
	 * table points to smalltable for small tables, else to<br>
	 * additional malloc'ed memory.  table is never NULL!  This rule<br>
	 * saves repeated runtime null-tests.<br>
	 * C type : setentry*
	 */
	@Field(5) 
	public Pointer<setentry > table() {
		return this.io.getPointerField(this, 5);
	}
	/**
	 * table points to smalltable for small tables, else to<br>
	 * additional malloc'ed memory.  table is never NULL!  This rule<br>
	 * saves repeated runtime null-tests.<br>
	 * C type : setentry*
	 */
	@Field(5) 
	public _setobject table(Pointer<setentry > table) {
		this.io.setPointerField(this, 5, table);
		return this;
	}
	/// C type : lookup_callback
	@Field(6) 
	public Pointer<_setobject.lookup_callback > lookup() {
		return this.io.getPointerField(this, 6);
	}
	/// C type : lookup_callback
	@Field(6) 
	public _setobject lookup(Pointer<_setobject.lookup_callback > lookup) {
		this.io.setPointerField(this, 6, lookup);
		return this;
	}
	/// C type : setentry[8]
	@Array({8}) 
	@Field(7) 
	public Pointer<setentry > smalltable() {
		return this.io.getPointerField(this, 7);
	}
	/// only used by frozenset objects
	@CLong 
	@Field(8) 
	public long hash() {
		return this.io.getCLongField(this, 8);
	}
	/// only used by frozenset objects
	@CLong 
	@Field(8) 
	public _setobject hash(long hash) {
		this.io.setCLongField(this, 8, hash);
		return this;
	}
	/**
	 * List of weak references<br>
	 * C type : PyObject*
	 */
	@Field(9) 
	public Pointer<PyObject > weakreflist() {
		return this.io.getPointerField(this, 9);
	}
	/**
	 * List of weak references<br>
	 * C type : PyObject*
	 */
	@Field(9) 
	public _setobject weakreflist(Pointer<PyObject > weakreflist) {
		this.io.setPointerField(this, 9, weakreflist);
		return this;
	}
	/// <i>native declaration : setobject.h:27</i>
	/// <i>native declaration : setobject.h:27</i>
	public static abstract class lookup_callback extends Callback<lookup_callback > {
		abstract public Pointer<setentry > apply(Pointer<_setobject > so, Pointer<PyObject > key, @CLong long hash);
	};
	public _setobject(Pointer pointer) {
		super(pointer);
	}
}
