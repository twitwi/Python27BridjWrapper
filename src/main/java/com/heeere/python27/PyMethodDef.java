package com.heeere.python27;
import com.heeere.python27.Python27Library.PyCFunction;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : methodobject.h:19</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("python27") 
public class PyMethodDef extends StructObject {
	public PyMethodDef() {
		super();
	}
	/**
	 * The name of the built-in function/method<br>
	 * C type : const char*
	 */
	@Field(0) 
	public Pointer<Byte > ml_name() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * The name of the built-in function/method<br>
	 * C type : const char*
	 */
	@Field(0) 
	public PyMethodDef ml_name(Pointer<Byte > ml_name) {
		this.io.setPointerField(this, 0, ml_name);
		return this;
	}
	/**
	 * The C function that implements it<br>
	 * C type : PyCFunction
	 */
	@Field(1) 
	public Pointer<PyCFunction > ml_meth() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * The C function that implements it<br>
	 * C type : PyCFunction
	 */
	@Field(1) 
	public PyMethodDef ml_meth(Pointer<PyCFunction > ml_meth) {
		this.io.setPointerField(this, 1, ml_meth);
		return this;
	}
	/**
	 * Combination of METH_xxx flags, which mostly<br>
	 * describe the args expected by the C func
	 */
	@Field(2) 
	public int ml_flags() {
		return this.io.getIntField(this, 2);
	}
	/**
	 * Combination of METH_xxx flags, which mostly<br>
	 * describe the args expected by the C func
	 */
	@Field(2) 
	public PyMethodDef ml_flags(int ml_flags) {
		this.io.setIntField(this, 2, ml_flags);
		return this;
	}
	/**
	 * The __doc__ attribute, or NULL<br>
	 * C type : const char*
	 */
	@Field(3) 
	public Pointer<Byte > ml_doc() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * The __doc__ attribute, or NULL<br>
	 * C type : const char*
	 */
	@Field(3) 
	public PyMethodDef ml_doc(Pointer<Byte > ml_doc) {
		this.io.setPointerField(this, 3, ml_doc);
		return this;
	}
	public PyMethodDef(Pointer pointer) {
		super(pointer);
	}
}
