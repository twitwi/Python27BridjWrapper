package com.heeere.python27;
import com.heeere.python27.Python27Library.Py_ssize_t;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.CLong;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : dictobject.h:42</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("python27") 
public class _dictobject extends StructObject {
	public _dictobject() {
		super();
	}
	/// C type : Py_ssize_t
	@Field(0) 
	public Pointer<Py_ssize_t > ob_refcnt() {
		return this.io.getPointerField(this, 0);
	}
	/// C type : Py_ssize_t
	@Field(0) 
	public _dictobject ob_refcnt(Pointer<Py_ssize_t > ob_refcnt) {
		this.io.setPointerField(this, 0, ob_refcnt);
		return this;
	}
	/// C type : _typeobject*
	@Field(1) 
	public Pointer<PyTypeObject > ob_type() {
		return this.io.getPointerField(this, 1);
	}
	/// C type : _typeobject*
	@Field(1) 
	public _dictobject ob_type(Pointer<PyTypeObject > ob_type) {
		this.io.setPointerField(this, 1, ob_type);
		return this;
	}
	/**
	 * # Active + # Dummy<br>
	 * C type : Py_ssize_t
	 */
	@Field(2) 
	public Pointer<Py_ssize_t > ma_fill() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * # Active + # Dummy<br>
	 * C type : Py_ssize_t
	 */
	@Field(2) 
	public _dictobject ma_fill(Pointer<Py_ssize_t > ma_fill) {
		this.io.setPointerField(this, 2, ma_fill);
		return this;
	}
	/**
	 * # Active<br>
	 * C type : Py_ssize_t
	 */
	@Field(3) 
	public Pointer<Py_ssize_t > ma_used() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * # Active<br>
	 * C type : Py_ssize_t
	 */
	@Field(3) 
	public _dictobject ma_used(Pointer<Py_ssize_t > ma_used) {
		this.io.setPointerField(this, 3, ma_used);
		return this;
	}
	/**
	 * The table contains ma_mask + 1 slots, and that's a power of 2.<br>
	 * We store the mask instead of the size because the mask is more<br>
	 * frequently needed.<br>
	 * C type : Py_ssize_t
	 */
	@Field(4) 
	public Pointer<Py_ssize_t > ma_mask() {
		return this.io.getPointerField(this, 4);
	}
	/**
	 * The table contains ma_mask + 1 slots, and that's a power of 2.<br>
	 * We store the mask instead of the size because the mask is more<br>
	 * frequently needed.<br>
	 * C type : Py_ssize_t
	 */
	@Field(4) 
	public _dictobject ma_mask(Pointer<Py_ssize_t > ma_mask) {
		this.io.setPointerField(this, 4, ma_mask);
		return this;
	}
	/**
	 * ma_table points to ma_smalltable for small tables, else to<br>
	 * additional malloc'ed memory.  ma_table is never NULL!  This rule<br>
	 * saves repeated runtime null-tests in the workhorse getitem and<br>
	 * setitem calls.<br>
	 * C type : PyDictEntry*
	 */
	@Field(5) 
	public Pointer<PyDictEntry > ma_table() {
		return this.io.getPointerField(this, 5);
	}
	/**
	 * ma_table points to ma_smalltable for small tables, else to<br>
	 * additional malloc'ed memory.  ma_table is never NULL!  This rule<br>
	 * saves repeated runtime null-tests in the workhorse getitem and<br>
	 * setitem calls.<br>
	 * C type : PyDictEntry*
	 */
	@Field(5) 
	public _dictobject ma_table(Pointer<PyDictEntry > ma_table) {
		this.io.setPointerField(this, 5, ma_table);
		return this;
	}
	/// C type : ma_lookup_callback
	@Field(6) 
	public Pointer<_dictobject.ma_lookup_callback > ma_lookup() {
		return this.io.getPointerField(this, 6);
	}
	/// C type : ma_lookup_callback
	@Field(6) 
	public _dictobject ma_lookup(Pointer<_dictobject.ma_lookup_callback > ma_lookup) {
		this.io.setPointerField(this, 6, ma_lookup);
		return this;
	}
	/// C type : PyDictEntry[8]
	@Array({8}) 
	@Field(7) 
	public Pointer<PyDictEntry > ma_smalltable() {
		return this.io.getPointerField(this, 7);
	}
	/// <i>native declaration : dictobject.h:41</i>
	/// <i>native declaration : dictobject.h:41</i>
	public static abstract class ma_lookup_callback extends Callback<ma_lookup_callback > {
		abstract public Pointer<PyDictEntry > apply(Pointer<_dictobject > mp, Pointer<PyObject > key, @CLong long hash);
	};
	public _dictobject(Pointer pointer) {
		super(pointer);
	}
}
