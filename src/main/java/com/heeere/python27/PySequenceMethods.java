package com.heeere.python27;
import com.heeere.python27.Python27Library.binaryfunc;
import com.heeere.python27.Python27Library.objobjproc;
import com.heeere.python27.Python27Library.ssizeargfunc;
import com.heeere.python27.Python27Library.ssizeobjargproc;
import com.heeere.python27.Python27Library.ssizessizeargfunc;
import com.heeere.python27.Python27Library.ssizessizeobjargproc;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : object.h:119</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("python27") 
public class PySequenceMethods extends StructObject {
	public PySequenceMethods() {
		super();
	}
	/// C type : binaryfunc
	@Field(1) 
	public Pointer<binaryfunc > sq_concat() {
		return this.io.getPointerField(this, 1);
	}
	/// C type : binaryfunc
	@Field(1) 
	public PySequenceMethods sq_concat(Pointer<binaryfunc > sq_concat) {
		this.io.setPointerField(this, 1, sq_concat);
		return this;
	}
	/// C type : ssizeargfunc
	@Field(2) 
	public Pointer<ssizeargfunc > sq_repeat() {
		return this.io.getPointerField(this, 2);
	}
	/// C type : ssizeargfunc
	@Field(2) 
	public PySequenceMethods sq_repeat(Pointer<ssizeargfunc > sq_repeat) {
		this.io.setPointerField(this, 2, sq_repeat);
		return this;
	}
	/// C type : ssizeargfunc
	@Field(3) 
	public Pointer<ssizeargfunc > sq_item() {
		return this.io.getPointerField(this, 3);
	}
	/// C type : ssizeargfunc
	@Field(3) 
	public PySequenceMethods sq_item(Pointer<ssizeargfunc > sq_item) {
		this.io.setPointerField(this, 3, sq_item);
		return this;
	}
	/// C type : ssizessizeargfunc
	@Field(4) 
	public Pointer<ssizessizeargfunc > sq_slice() {
		return this.io.getPointerField(this, 4);
	}
	/// C type : ssizessizeargfunc
	@Field(4) 
	public PySequenceMethods sq_slice(Pointer<ssizessizeargfunc > sq_slice) {
		this.io.setPointerField(this, 4, sq_slice);
		return this;
	}
	/// C type : ssizeobjargproc
	@Field(5) 
	public Pointer<ssizeobjargproc > sq_ass_item() {
		return this.io.getPointerField(this, 5);
	}
	/// C type : ssizeobjargproc
	@Field(5) 
	public PySequenceMethods sq_ass_item(Pointer<ssizeobjargproc > sq_ass_item) {
		this.io.setPointerField(this, 5, sq_ass_item);
		return this;
	}
	/// C type : ssizessizeobjargproc
	@Field(6) 
	public Pointer<ssizessizeobjargproc > sq_ass_slice() {
		return this.io.getPointerField(this, 6);
	}
	/// C type : ssizessizeobjargproc
	@Field(6) 
	public PySequenceMethods sq_ass_slice(Pointer<ssizessizeobjargproc > sq_ass_slice) {
		this.io.setPointerField(this, 6, sq_ass_slice);
		return this;
	}
	/// C type : objobjproc
	@Field(7) 
	public Pointer<objobjproc > sq_contains() {
		return this.io.getPointerField(this, 7);
	}
	/// C type : objobjproc
	@Field(7) 
	public PySequenceMethods sq_contains(Pointer<objobjproc > sq_contains) {
		this.io.setPointerField(this, 7, sq_contains);
		return this;
	}
	/**
	 * Added in release 2.0<br>
	 * C type : binaryfunc
	 */
	@Field(8) 
	public Pointer<binaryfunc > sq_inplace_concat() {
		return this.io.getPointerField(this, 8);
	}
	/**
	 * Added in release 2.0<br>
	 * C type : binaryfunc
	 */
	@Field(8) 
	public PySequenceMethods sq_inplace_concat(Pointer<binaryfunc > sq_inplace_concat) {
		this.io.setPointerField(this, 8, sq_inplace_concat);
		return this;
	}
	/// C type : ssizeargfunc
	@Field(9) 
	public Pointer<ssizeargfunc > sq_inplace_repeat() {
		return this.io.getPointerField(this, 9);
	}
	/// C type : ssizeargfunc
	@Field(9) 
	public PySequenceMethods sq_inplace_repeat(Pointer<ssizeargfunc > sq_inplace_repeat) {
		this.io.setPointerField(this, 9, sq_inplace_repeat);
		return this;
	}
	public PySequenceMethods(Pointer pointer) {
		super(pointer);
	}
}
