package com.heeere.python27;
import com.heeere.python27.Python27Library.Py_ssize_t;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : dictobject.h:10</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("python27") 
public class PyDictEntry extends StructObject {
	public PyDictEntry() {
		super();
	}
	/**
	 * Cached hash code of me_key.  Note that hash codes are C longs.<br>
	 * We have to use Py_ssize_t instead because dict_popitem() abuses<br>
	 * me_hash to hold a search finger.<br>
	 * C type : Py_ssize_t
	 */
	@Field(0) 
	public Pointer<Py_ssize_t > me_hash() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * Cached hash code of me_key.  Note that hash codes are C longs.<br>
	 * We have to use Py_ssize_t instead because dict_popitem() abuses<br>
	 * me_hash to hold a search finger.<br>
	 * C type : Py_ssize_t
	 */
	@Field(0) 
	public PyDictEntry me_hash(Pointer<Py_ssize_t > me_hash) {
		this.io.setPointerField(this, 0, me_hash);
		return this;
	}
	/// C type : PyObject*
	@Field(1) 
	public Pointer<PyObject > me_key() {
		return this.io.getPointerField(this, 1);
	}
	/// C type : PyObject*
	@Field(1) 
	public PyDictEntry me_key(Pointer<PyObject > me_key) {
		this.io.setPointerField(this, 1, me_key);
		return this;
	}
	/// C type : PyObject*
	@Field(2) 
	public Pointer<PyObject > me_value() {
		return this.io.getPointerField(this, 2);
	}
	/// C type : PyObject*
	@Field(2) 
	public PyDictEntry me_value(Pointer<PyObject > me_value) {
		this.io.setPointerField(this, 2, me_value);
		return this;
	}
	public PyDictEntry(Pointer pointer) {
		super(pointer);
	}
}
