package com.heeere.python27;
import com.heeere.python27.Python27Library.Py_tracefunc;
import com.heeere.python27.Python27Library._frame;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.CLong;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : pystate.h:60</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("python27") 
public class PyThreadState extends StructObject {
	public PyThreadState() {
		super();
	}
	/// C type : _ts*
	@Field(0) 
	public Pointer<PyThreadState > next() {
		return this.io.getPointerField(this, 0);
	}
	/// C type : _ts*
	@Field(0) 
	public PyThreadState next(Pointer<PyThreadState > next) {
		this.io.setPointerField(this, 0, next);
		return this;
	}
	/// C type : PyInterpreterState*
	@Field(1) 
	public Pointer<PyInterpreterState > interp() {
		return this.io.getPointerField(this, 1);
	}
	/// C type : PyInterpreterState*
	@Field(1) 
	public PyThreadState interp(Pointer<PyInterpreterState > interp) {
		this.io.setPointerField(this, 1, interp);
		return this;
	}
	/// C type : _frame*
	@Field(2) 
	public Pointer<_frame > frame() {
		return this.io.getPointerField(this, 2);
	}
	/// C type : _frame*
	@Field(2) 
	public PyThreadState frame(Pointer<_frame > frame) {
		this.io.setPointerField(this, 2, frame);
		return this;
	}
	@Field(3) 
	public int recursion_depth() {
		return this.io.getIntField(this, 3);
	}
	@Field(3) 
	public PyThreadState recursion_depth(int recursion_depth) {
		this.io.setIntField(this, 3, recursion_depth);
		return this;
	}
	/**
	 * 'tracing' keeps track of the execution depth when tracing/profiling.<br>
	 * This is to prevent the actual trace/profile code from being recorded in<br>
	 * the trace/profile.
	 */
	@Field(4) 
	public int tracing() {
		return this.io.getIntField(this, 4);
	}
	/**
	 * 'tracing' keeps track of the execution depth when tracing/profiling.<br>
	 * This is to prevent the actual trace/profile code from being recorded in<br>
	 * the trace/profile.
	 */
	@Field(4) 
	public PyThreadState tracing(int tracing) {
		this.io.setIntField(this, 4, tracing);
		return this;
	}
	@Field(5) 
	public int use_tracing() {
		return this.io.getIntField(this, 5);
	}
	@Field(5) 
	public PyThreadState use_tracing(int use_tracing) {
		this.io.setIntField(this, 5, use_tracing);
		return this;
	}
	/// C type : Py_tracefunc
	@Field(6) 
	public Pointer<Py_tracefunc > c_profilefunc() {
		return this.io.getPointerField(this, 6);
	}
	/// C type : Py_tracefunc
	@Field(6) 
	public PyThreadState c_profilefunc(Pointer<Py_tracefunc > c_profilefunc) {
		this.io.setPointerField(this, 6, c_profilefunc);
		return this;
	}
	/// C type : Py_tracefunc
	@Field(7) 
	public Pointer<Py_tracefunc > c_tracefunc() {
		return this.io.getPointerField(this, 7);
	}
	/// C type : Py_tracefunc
	@Field(7) 
	public PyThreadState c_tracefunc(Pointer<Py_tracefunc > c_tracefunc) {
		this.io.setPointerField(this, 7, c_tracefunc);
		return this;
	}
	/// C type : PyObject*
	@Field(8) 
	public Pointer<PyObject > c_profileobj() {
		return this.io.getPointerField(this, 8);
	}
	/// C type : PyObject*
	@Field(8) 
	public PyThreadState c_profileobj(Pointer<PyObject > c_profileobj) {
		this.io.setPointerField(this, 8, c_profileobj);
		return this;
	}
	/// C type : PyObject*
	@Field(9) 
	public Pointer<PyObject > c_traceobj() {
		return this.io.getPointerField(this, 9);
	}
	/// C type : PyObject*
	@Field(9) 
	public PyThreadState c_traceobj(Pointer<PyObject > c_traceobj) {
		this.io.setPointerField(this, 9, c_traceobj);
		return this;
	}
	/// C type : PyObject*
	@Field(10) 
	public Pointer<PyObject > curexc_type() {
		return this.io.getPointerField(this, 10);
	}
	/// C type : PyObject*
	@Field(10) 
	public PyThreadState curexc_type(Pointer<PyObject > curexc_type) {
		this.io.setPointerField(this, 10, curexc_type);
		return this;
	}
	/// C type : PyObject*
	@Field(11) 
	public Pointer<PyObject > curexc_value() {
		return this.io.getPointerField(this, 11);
	}
	/// C type : PyObject*
	@Field(11) 
	public PyThreadState curexc_value(Pointer<PyObject > curexc_value) {
		this.io.setPointerField(this, 11, curexc_value);
		return this;
	}
	/// C type : PyObject*
	@Field(12) 
	public Pointer<PyObject > curexc_traceback() {
		return this.io.getPointerField(this, 12);
	}
	/// C type : PyObject*
	@Field(12) 
	public PyThreadState curexc_traceback(Pointer<PyObject > curexc_traceback) {
		this.io.setPointerField(this, 12, curexc_traceback);
		return this;
	}
	/// C type : PyObject*
	@Field(13) 
	public Pointer<PyObject > exc_type() {
		return this.io.getPointerField(this, 13);
	}
	/// C type : PyObject*
	@Field(13) 
	public PyThreadState exc_type(Pointer<PyObject > exc_type) {
		this.io.setPointerField(this, 13, exc_type);
		return this;
	}
	/// C type : PyObject*
	@Field(14) 
	public Pointer<PyObject > exc_value() {
		return this.io.getPointerField(this, 14);
	}
	/// C type : PyObject*
	@Field(14) 
	public PyThreadState exc_value(Pointer<PyObject > exc_value) {
		this.io.setPointerField(this, 14, exc_value);
		return this;
	}
	/// C type : PyObject*
	@Field(15) 
	public Pointer<PyObject > exc_traceback() {
		return this.io.getPointerField(this, 15);
	}
	/// C type : PyObject*
	@Field(15) 
	public PyThreadState exc_traceback(Pointer<PyObject > exc_traceback) {
		this.io.setPointerField(this, 15, exc_traceback);
		return this;
	}
	/**
	 * Stores per-thread state<br>
	 * C type : PyObject*
	 */
	@Field(16) 
	public Pointer<PyObject > dict() {
		return this.io.getPointerField(this, 16);
	}
	/**
	 * Stores per-thread state<br>
	 * C type : PyObject*
	 */
	@Field(16) 
	public PyThreadState dict(Pointer<PyObject > dict) {
		this.io.setPointerField(this, 16, dict);
		return this;
	}
	/**
	 * tick_counter is incremented whenever the check_interval ticker<br>
	 * reaches zero. The purpose is to give a useful measure of the number<br>
	 * of interpreted bytecode instructions in a given thread.  This<br>
	 * extremely lightweight statistic collector may be of interest to<br>
	 * profilers (like psyco.jit()), although nothing in the core uses it.
	 */
	@Field(17) 
	public int tick_counter() {
		return this.io.getIntField(this, 17);
	}
	/**
	 * tick_counter is incremented whenever the check_interval ticker<br>
	 * reaches zero. The purpose is to give a useful measure of the number<br>
	 * of interpreted bytecode instructions in a given thread.  This<br>
	 * extremely lightweight statistic collector may be of interest to<br>
	 * profilers (like psyco.jit()), although nothing in the core uses it.
	 */
	@Field(17) 
	public PyThreadState tick_counter(int tick_counter) {
		this.io.setIntField(this, 17, tick_counter);
		return this;
	}
	@Field(18) 
	public int gilstate_counter() {
		return this.io.getIntField(this, 18);
	}
	@Field(18) 
	public PyThreadState gilstate_counter(int gilstate_counter) {
		this.io.setIntField(this, 18, gilstate_counter);
		return this;
	}
	/**
	 * Asynchronous exception to raise<br>
	 * C type : PyObject*
	 */
	@Field(19) 
	public Pointer<PyObject > async_exc() {
		return this.io.getPointerField(this, 19);
	}
	/**
	 * Asynchronous exception to raise<br>
	 * C type : PyObject*
	 */
	@Field(19) 
	public PyThreadState async_exc(Pointer<PyObject > async_exc) {
		this.io.setPointerField(this, 19, async_exc);
		return this;
	}
	/// Thread id where this tstate was created
	@CLong 
	@Field(20) 
	public long thread_id() {
		return this.io.getCLongField(this, 20);
	}
	/// Thread id where this tstate was created
	@CLong 
	@Field(20) 
	public PyThreadState thread_id(long thread_id) {
		this.io.setCLongField(this, 20, thread_id);
		return this;
	}
	@Field(21) 
	public int trash_delete_nesting() {
		return this.io.getIntField(this, 21);
	}
	@Field(21) 
	public PyThreadState trash_delete_nesting(int trash_delete_nesting) {
		this.io.setIntField(this, 21, trash_delete_nesting);
		return this;
	}
	/// C type : PyObject*
	@Field(22) 
	public Pointer<PyObject > trash_delete_later() {
		return this.io.getPointerField(this, 22);
	}
	/// C type : PyObject*
	@Field(22) 
	public PyThreadState trash_delete_later(Pointer<PyObject > trash_delete_later) {
		this.io.setPointerField(this, 22, trash_delete_later);
		return this;
	}
	public PyThreadState(Pointer pointer) {
		super(pointer);
	}
}
